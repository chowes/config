"GENERAL

"disable compatibility with vi
set nocompatible

"backup is really just an annoyance since we're using git anyway
set nobackup
set nowb
set noswapfile

"turn on syntax highlighting
syntax on

"TABS
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent

"COLOURS
colorscheme badwolf
set hlsearch
set ignorecase
set smartcase
set incsearch

"LAYOUT
set list " display tabs and line endings
set listchars=trail:-,tab:-- " change the way tabs and line ends are displayed
set number
set backspace=2 "allow backspace to delete characters
set hidden "allow multiple files to opened in different buffers, 'hidden' in the background
set wildmenu "Enable enhanced command-line completion
set autochdir "change the working directory to the directory in which the file being opened lives
set history=1000 "remember 1000 commands/search strings
set sessionoptions-=options "when a session is saved, do not store vimrc options
set autoread "reread file if an external program has changed a file
autocmd Filetype c setlocal textwidth=132  "max 132 characters in a line for c files

"SHELL
if !empty(glob('/usr/bin/zsh'))
    set shell=/usr/bin/zsh
endif

filetype on
filetype plugin on

"LEADER KEY SHORTCUTS

let mapleader = "\<Space>"

nnoremap <Leader>w :w<CR>

"------------------------------  MACROS ----------------------------------
"Remove whitespaces at the end of the line
let @a=':%s/\s\+$//' "pressing @a in a file will remove all spaces at the end of a line (typing ctrl + v followed by enter gives ^M)

"------------------------- LEADER KEY SHORTCUTS --------------------------
let mapleader = "\<Space>"
"leader + w to save a file
nnoremap <Leader>w :w<CR>
"various shortcuts to copy/paste from system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P
"leader + m to run make on the terminal
noremap <Leader>m :!make <enter>
"leader + c to run make clean on the terminal
noremap <Leader>c :!make clean <enter>
"leader + v to open vimrc file in a vsplit
nnoremap <leader>v :vsplit $MYVIMRC<cr>

"--------------------- Vim-Plug managed plugins ------------------------------
"If vim-plug isn't installed, install it
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
else
	"plugin installed, load plugins
	call plug#begin('~/.vim/plugged')
		" airline plugin
		Plug 'vim-airline/vim-airline'
		Plug 'vim-airline/vim-airline-themes'

		"Plugins to support snips
		Plug 'MarcWeber/vim-addon-mw-utils'
		Plug 'tomtom/tlib_vim'
		Plug 'garbas/vim-snipmate'
		Plug 'honza/vim-snippets'

		"Git plugins
		Plug 'airblade/vim-gitgutter'
		Plug 'tpope/vim-fugitive'
		Plug 'gregsexton/gitv', {'on': ['Gitv']}
		"rhubarb is used for :Gbrowse command
		Plug 'tpope/vim-rhubarb'

		"Marks :help signature
		Plug 'kshenoy/vim-signature'
	call plug#end()
endif

" Open quickfix window list after search completes
function! MySearch()
  let grep_term = input("Enter search term: ")
  if !empty(grep_term)
    execute 'silent grep' grep_term | copen
  else
    echo "Empty search term"
  endif
  redraw!
endfunction

" :Grep in vim calls ag and automatically opens the quickfix window list
command! Grep call MySearch()

"---------------------------------------- CUSTOM ----------------------------------------

" Load matchit.vim, but only if the user hasn't installed a newer version.
" Use % key to jump between if,else if and else statements
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

if executable('ag')
  " Use Ag over Grep
    set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

let c_space_errors = 1 "highlight trailing white space for c files

" Airline settings
"let g:airline_section_b="" "dont show git hunks
"let g:airline_section_x="" "dont show filetype
"let g:airline_section_y="" "dont show file encoding
"let g:airline_section_z="" "dont show cursor pos info
let g:airline#extensions#tabline#enabled = 1 "enable buffer line at the top
let g:airline#extensions#tabline#buffer_min_count = 2 "show buffer line only when at least 2 buffers are open
let g:airline#extensions#tabline#buffer_idx_mode = 1 "show numbers in buffer line
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9
nmap <leader>- <Plug>AirlineSelectPrevTab
nmap <leader>= <Plug>AirlineSelectNextTab
set noshowmode

" Allow saving of files as sudo when forgetting to start vim using sudo
cmap w!! w !sudo tee > /dev/null %

" GitGutter settings
let g:gitgutter_max_signs = 5000 "max diff of 5000 lines

